generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/* =========================
   OTP
========================= */
model OTP {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  contact   String   @unique   // email OR phone
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

/* =========================
   USERS
========================= */
model User {
  id        String     @id @map("_id") @default(auto()) @db.ObjectId
  phone     String?
  email     String?   
  name      String?
  createdAt DateTime   @default(now())

  addresses Address[]
  wishlists Wishlist[]
  bags      Bag[]
  accounts  Account[]
  orders    Order[]
}

/* =========================
   ADDRESSES
========================= */
model Address {
  id         String   @id @map("_id") @default(auto()) @db.ObjectId
  userId     String   @db.ObjectId
  name       String
  phone      String
  doorNumber String?
  landmark   String?
  type       String?
  street     String
  city       String
  state      String
  pincode    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id])
}

/* =========================
   CATEGORY (hierarchical)
========================= */
model Category {
  id        String     @id @map("_id") @default(auto()) @db.ObjectId
  name      String
  slug      String     @unique
  parentId  String?    @db.ObjectId
  createdAt DateTime   @default(now())

  // Self-relation (tree)
  parent    Category?  @relation("CategoryChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Category[] @relation("CategoryChildren")

  products  Product[]  @relation("ProductToCategory")

  @@index([parentId])
}

/* =========================
   PRODUCTS
========================= */
model Product {
  id             String           @id @map("_id") @default(auto()) @db.ObjectId
  name           String?
  description    String?
  category       String?
  subCategory    String?
  subSubCategory String?

  images         String[]
  sizes          String[]
  rating       Float?   @default(0)
  reviewCount  Int?     @default(0)
  colors         Json[]
  colorNames     String[]
  price          Float
  mrp            Float?
  discount       Int?
  stock          Int      @default(0)
  purchases      Int      @default(0)
  createdAt      DateTime @default(now())

  categoryId     String?   @db.ObjectId
  categoryNode   Category? @relation("ProductToCategory", fields: [categoryId], references: [id])

  variants       ProductVariant[]
  wishlists      Wishlist[]
  bagItems       Bag[]
  orderItems     OrderItem[]

  @@index([categoryId])
  @@index([category, subCategory, subSubCategory])
}

/* =========================
   PRODUCT VARIANTS
========================= */
model ProductVariant {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  productId String   @db.ObjectId
  sizes     String[]
  colors    Json[]
  design    String?
  price     Float?
  mrp       Float?
  discount  Int?
  stock     Int
  images    String[]
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])

  @@index([productId])
}
model Rating {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  userId    String
  productId String
  rating    Float
  createdAt DateTime @default(now())

  @@unique([userId, productId])  // <-- only one rating per user per product
}



/* =========================
   WISHLIST
========================= */
model Wishlist {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  name      String   @default("Default")
  createdAt DateTime @default(now())

  user    User?     @relation(fields: [userId], references: [id])
  product Product?  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

/* =========================
   BAG
========================= */
model Bag {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  size      String?
  quantity  Int      @default(1)
  createdAt DateTime @default(now())

  user    User?    @relation(fields: [userId], references: [id])
  product Product? @relation(fields: [productId], references: [id])

  @@unique([userId, productId, size])
  @@index([userId])
  @@index([productId])
}

/* =========================
   ACCOUNT
========================= */
model Account {
  id            String   @id @map("_id") @default(auto()) @db.ObjectId
  userId        String   @unique @db.ObjectId
  name          String
  email         String   
  phone         String
  bankName      String?
  accountNumber String?
  ifsc          String?
  branch        String?
  pincode       String?
  address       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

/* =========================
   ORDERS
========================= */
model Order {
  id               String      @id @map("_id") @default(auto()) @db.ObjectId
  userId           String      @db.ObjectId
  totalAmount      Float
  status           String      @default("PENDING")
  paymentMode      String      @default("COD")
  address          String?
  expectedDelivery DateTime?
  upiId            String?
  cardDetails      String?
  trackingNumber   String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime?   @updatedAt

  user  User       @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@index([userId])
}

/* =========================
   ORDER ITEMS
========================= */
model OrderItem {
  id        String   @id @map("_id") @default(auto()) @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  size      String?
  name      String?

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}
